# api/services/github_service.py

from dotenv import load_dotenv
import os
from github import Github
from github.GithubException import GithubException
from typing import Dict, Tuple
import requests
import time

load_dotenv()

# Load GitHub credentials from .env
GITHUB_USER = os.getenv("GITHUB_USER")
GITHUB_TOKEN = os.getenv("GITHUB_TOKEN")

def push_to_github(task_name: str, code_files: Dict[str, str]) -> Tuple[str, str, str]:
    """
    Push code to GitHub, create repo, commit files, enable GitHub Pages.

    Args:
        task_name: Unique task identifier (used for repo name)
        code_files: dict of filename -> file content

    Returns:
        repo_url: str
        commit_sha: str
        pages_url: str
    """

    g = Github(GITHUB_TOKEN)

    try:
        # Create a public repo
        user = g.get_user()
        try:
            repo = user.get_repo(task_name)
            print(f"Repo '{task_name}' already exists. Using existing repo.")
        except GithubException as e:
            if e.status == 404:
                # Repo doesn't exist → create new
                repo = user.create_repo(
                    name=task_name,
                    private=False,
                    auto_init=False,
                    description=f"Generated by LLM Code Deployment for task {task_name}",
                    license_template="mit"
                )
                print(f"Created new repo {repo.full_name}")
            else:
                raise e

        # Push files to repo
        for filename, content in code_files.items():
            path = filename
            try:
                existing_file = repo.get_contents(path, ref="main")
                # If the file exists, update it on main
                repo.update_file(
                    path=path,
                    message=f"Update {filename}",
                    content=content,
                    sha=existing_file.sha,
                    branch="main"
                )
                print(f"Updated {filename} in {repo.full_name} (main)")
            except GithubException as e:
                # If the file doesn’t exist -> 404 from get_contents -> create it
                if e.status == 404:
                    repo.create_file(
                        path=path,
                        message=f"Add {filename}",
                        content=content,
                        branch="main"
                    )
                    print(f"Created {filename} in {repo.full_name} (main)")
                else:
                    # re-raise other Github exceptions so caller can handle/log them
                    raise

        # Get latest commit SHA
        commit_sha = repo.get_commits()[0].sha

        # Enable GitHub Pages
        pages_url = f"https://{GITHUB_USER}.github.io/{task_name}/"
        api_url = f"https://api.github.com/repos/{GITHUB_USER}/{task_name}/pages"
        headers = {"Authorization": f"token {GITHUB_TOKEN}"}
        payload = {
            "source": {
                "branch": "main",
                "path": "/"
            }
        }
        resp = requests.post(api_url, headers=headers, json=payload)
        if resp.status_code in (201, 204):
            print(f"GitHub Pages enabled at {pages_url}")
        else:
            print(f"Could not enable GitHub Pages: {resp.status_code}, {resp.text}")

        return repo.html_url, commit_sha, pages_url

    except GithubException as e:
        print(f"GitHub error: {e}")
        raise e
